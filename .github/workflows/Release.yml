name: Release

on:
  workflow_dispatch: # 手动触发
    inputs:
      version:
        description: Version to release (x.x.x)
        default: 1.0.0
        required: true
env:
  FLUTTER_VERSION: '3.19.4'

permissions: write-all # 给所有工作写权限

jobs:
  job_v:
    name: 构建版本号和变更信息
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create_version.outputs.tag_name }} # 版本号
      body: ${{ steps.create_version.outputs.body }} # 版本变更内容
    steps:
      - uses: release-drafter/release-drafter@v5
        id: create_version
        with:
          config-name: release-drafter.yml # 配置文件在 .github/release-drafter.yml
          disable-autolabeler: true # 禁止自动标签
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      - name: 查看变量
        run: |
          echo ${{ format('version={0}', steps.create_version.outputs.tag_name ) }} 

  job_apk:
    name: 构建android软件
    runs-on: ubuntu-latest
    env:
      version: "pushAction"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: 编译环境设置 Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: 构建签名环境
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: echo $SIGNING_KEY | base64 -d > android/app/key.jks
      - name: 编译apk
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION  }}
          cache: true
          cache-key: "flutter-linux-stable-3.19.4-x64-68bfaea224880b488c617afe30ab12091ea8fa4e"
          pub-cache-key: "flutter-pub-linux-stable-3.19.4-x64-68bfaea224880b488c617afe30ab12091ea8fa4e-83c53fcb102a1a8c7cf6459df89e9069e48111c609f2513ffd98050aeee06ab5"
      - name: 执行编译命令
        env:
          ALIAS: ${{ secrets.ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        run: |
          flutter pub get
          flutter build apk --release --target-platform android-arm,android-arm64
      - name: 重命名文件
        run: mv build/app/outputs/apk/release/app-release.apk build/app/outputs/apk/release/schedule-android-${{ env.version }}.apk
      - name: 上传产物
        uses: actions/upload-artifact@v3
        with:
          name: android
          path: build/app/outputs/apk/release/schedule-android-${{ env.version }}.apk

  job_ipa:
    needs: job_v
    name: 构建ios软件
    runs-on: macos-latest
    env:
      version: ${{ needs.job_v.outputs.version }}
      body: ${{ needs.job_v.outputs.body }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: 读入环境信息
        run: |
          echo ${{ format('version {0}', env.version ) }}
      - name: 编译环境设置
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION  }}
      - name: Build (ios)
        run: |
          sh scripts/build-ipa.sh
      - name: 重命名文件
        run:  mv build/ios/iphoneos/release-ios.ipa build/ios/iphoneos/schedule-ios-${{ env.version }}.ipa
      - name: 上传产物
        uses: actions/upload-artifact@v3
        with:
          name: ios
          path: build/ios/iphoneos/schedule-ios-${{ env.version }}.ipa

  job_windows:
    needs: job_v # 等待 jobs_v 任务完成才执行
    name: 构建windows软件
    runs-on: windows-latest
    env:
      version: ${{ needs.job_v.outputs.version }}
      body: ${{ needs.job_v.outputs.body }}
      versionNoV: ${{ inputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: 读入环境信息
        run: |
          echo ${{ format('version {0}', env.version ) }} # 版本号
      - name: Flutter 环境
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION  }}

      - name: 构建
        run: |
          flutter config --enable-windows-desktop
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs --enable-experiment=records,patterns

      - name: 替换文本
        run: |
          choco install sed make -y
          sed -i "s/%{{SCHEDULE_VERSION}}%/${{ env.versionNoV }}/" windows/runner/Runner.rc
          sed -i "s/%{{SCHEDULE_VERSION}}%/${{ env.versionNoV }}/" windows/choco-struct/schedule.nuspec

      - name: 打包exe
        run: |
          dart pub global activate flutter_distributor
          make innoinstall
          flutter_distributor package --platform=windows --targets=exe --skip-clean
          mv dist/**/schedule-*-windows-setup.exe dist/schedule-windows-x86_64-setup.exe

      - name: 打包nupkg
        run: |
          Set-Variable -Name HASH -Value (Get-FileHash dist\schedule-windows-x86_64-setup.exe).Hash
          make choco
          mv dist/schedule.*.nupkg dist/schedule-windows-x86_64.nupkg

      - name: 重命名
        run: |
          mv dist/schedule-windows-x86_64.nupkg dist/schedule-windows-${{env.version}}-x86_64.nupkg
          mv dist/schedule-windows-x86_64-setup.exe dist/schedule-windows-${{env.version}}-x86_64-setup.exe

      - name: 上传产物
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: |
            dist/schedule-windows-${{env.version}}-x86_64.nupkg
            dist/schedule-windows-${{env.version}}-x86_64-setup.exe

  job_macos:
    needs: job_v
    name: 构建macos
    runs-on: macos-latest
    env:
      version: ${{ needs.job_v.outputs.version }}
      body: ${{ needs.job_v.outputs.body }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: 读入环境信息
        run: |
          echo ${{ format('version {0}', env.version ) }} # 版本号
      - name: 构建Flutter环境
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION  }}
      - name: 编译dmg
        run: |
          flutter pub get
          flutter build macos --release
          sh scripts/build-macos.sh
      - name: 重命名文件
        run: |
          mv build/macos/Build/Products/Release/*.dmg build/macos/Build/Products/Release/schedule-macos-${{env.version}}.dmg
      - name: 上传产物
        uses: actions/upload-artifact@v3
        with:
          name: macos
          path: build/macos/Build/Products/Release/*.dmg

  job_linux:
    needs: job_v
    name: 构建linux
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.job_v.outputs.version }}
      body: ${{ needs.job_v.outputs.body }}
    steps:
      - uses: actions/checkout@v4
      - name: Flutter 环境
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION  }}

      - name: 安装依赖
        run: |
          sudo apt-get update -y
          sudo apt-get install -y tar clang cmake ninja-build pkg-config libgtk-3-dev make python3-pip python3-setuptools desktop-file-utils libgdk-pixbuf2.0-dev fakeroot strace fuse libunwind-dev locate patchelf gir1.2-appindicator3-0.1 libappindicator3-1 libappindicator3-dev libsecret-1-0 libjsoncpp25 libsecret-1-dev libjsoncpp-dev libnotify-bin libnotify-dev mpv libmpv-dev

      - name: 安装 AppImage Tool工具
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          mv appimagetool /usr/local/bin/

      - name: 开始构建
        run: |
          flutter config --enable-linux-desktop
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs --enable-experiment=records,patterns

      - name: 打包
        run: |
          dart pub global activate flutter_distributor
          alias dpkg-deb="dpkg-deb --Zxz"
          flutter_distributor package --platform=linux --targets=deb
          flutter_distributor package --platform=linux --targets=rpm

      - name: 创建 tar.xz
        run: make tar VERSION=${{ env.version }} ARCH=x64 PKG_ARCH=x86_64

      - name: Move Files to dist
        run: |
          mv build/schedule-linux-${{ env.version }}-x86_64.tar.xz dist/
          mv dist/**/schedule-*-linux.deb dist/schedule-linux-${{ env.version }}-x86_64.deb
          mv dist/**/schedule-*-linux.rpm dist/schedule-linux-${{ env.version }}-x86_64.rpm

      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: linux
          path: |
            dist/schedule-linux-${{ env.version }}-x86_64.deb
            dist/schedule-linux-${{ env.version }}-x86_64.rpm
            dist/schedule-linux-${{ env.version }}-x86_64.tar.xz


  job_release:
    needs: [ job_v,job_apk,job_ipa,job_windows,job_macos,job_linux ]
    name: 发布版本
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.job_v.outputs.version }}
      body: ${{ needs.job_v.outputs.body }}
    steps:
      - name: 下载产物
        id: download
        uses: actions/download-artifact@v3
        with:
          path: ./
      - name: 读入环境信息
        run: |
          echo ${{ format('version {0}', env.version ) }}
          echo ${{steps.download.outputs.download-path}}
          ls -R

      - name: 发布文件
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          allowUpdates: true # 覆盖文件
          #draft: true # 草稿 自己可见 版本号会保持一样 默认是自动发布 latest
          #prerelease: true # 预发布 别人可以看到 版本号会继续加
          tag: ${{ env.version }} # 版本号 v0.1.0
          body: ${{ env.body }} # 输出的内容
          artifacts: "android/*,ios/*,windows/*,macos/*,linux/*"
